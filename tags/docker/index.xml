<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on OPSXCQ Blog</title>
    <link>https://strm.sh/tags/docker/</link>
    <description>Recent content in Docker on OPSXCQ Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://strm.sh/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker network restrictions with Tor</title>
      <link>https://strm.sh/post/docker-network-restrictions-with-tor/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://strm.sh/post/docker-network-restrictions-with-tor/</guid>
      <description>Image the following usecase, you have an application and want to for its traffict through Tor, exclusively. If if is running on your computer like a normal application, it is simple, just add some iptables rules. But in the container world things are different, specially if you want to escalate it through several machines.
Here will be explored an usecase of an isolated container that can only communicate with a proxy container that has access to the Tor network.</description>
    </item>
    
    <item>
      <title>Abusing insecure docker deployments</title>
      <link>https://strm.sh/post/abusing-insecure-docker-deployments/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://strm.sh/post/abusing-insecure-docker-deployments/</guid>
      <description>Is possible to abuse and escape from containers in several scenarios, in this post I will explore the most basic one: abusing the docker socket to escape the container and run code as root in the host machine.
Table of Contents
 Lab setup Attack  Information gathering Getting access Escalating privileges   Lab setup Since we will be using containers, you have to install docker to be able to run this lab.</description>
    </item>
    
    <item>
      <title>Running Cron tasks on docker - The correct way</title>
      <link>https://strm.sh/post/cron-tasks-inside-docker/</link>
      <pubDate>Thu, 06 Sep 2018 19:22:38 +0000</pubDate>
      
      <guid>https://strm.sh/post/cron-tasks-inside-docker/</guid>
      <description>While is perfectly possible to use cron inside a container, I strongly advise you to don&amp;rsquo;t do it. Some of the most important points on why is a bad practice to run cron inside a container:
Your tasks need to be ephemeral as your containers We live in the immutable infrastructure era, there is no need to worry about cleaning up everything before or after your tasks run. Make your scheduled tasks ephemeral as your containers, if something goes wrong, you can inspect the precise state that the container was left.</description>
    </item>
    
  </channel>
</rss>