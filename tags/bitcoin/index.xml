<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bitcoin on OPSXCQ Blog</title>
    <link>https://strm.sh/tags/bitcoin/</link>
    <description>Recent content in Bitcoin on OPSXCQ Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Sep 2018 20:19:50 +0000</lastBuildDate>
    
	<atom:link href="https://strm.sh/tags/bitcoin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bitcoin address generation in pure python</title>
      <link>https://strm.sh/post/bitcoin-address-generation/</link>
      <pubDate>Fri, 14 Sep 2018 20:19:50 +0000</pubDate>
      
      <guid>https://strm.sh/post/bitcoin-address-generation/</guid>
      <description>Bitcoin address generation can be split in 4 steps listed bellow:
 Generating a secure private key. Calculate the public key from the private key. Encode the public key as a bitcoin address. Encode the private key in the WIF format.  Step 1: Generate ECDSA Keypair The very first step is to select a good and secure number, for this example we won&amp;rsquo;t use one, instead we will simply get the random from the system.</description>
    </item>
    
    <item>
      <title>Bitcoin transaction nonce reuse vulnerability</title>
      <link>https://strm.sh/post/bitcoin-transaction-nonce-reuse/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://strm.sh/post/bitcoin-transaction-nonce-reuse/</guid>
      <description>This post aims to analyse an attack against the Bitcoin, in this attack were Found 123 vulnerable transactions and 416 private keys were recovered summing up 26.85729198 btcs (2685729198 satoshis) could have been compromised, which at this exact moment worth 166,219.51 dollars.
Cryptographic concept of the attack When the nonce is reused it become vulnerable and result in a trivial equation to be solved.
$$ Key=((r \times (s_1 - s_2))^{p - 2} \mod{p}) \times ((m_1 \times s_2) - (m_2 \times s_1)) \mod{p} $$</description>
    </item>
    
  </channel>
</rss>