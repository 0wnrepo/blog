<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cryptography on OPSXCQ Blog</title>
    <link>https://strm.sh/tags/cryptography/</link>
    <description>Recent content in Cryptography on OPSXCQ Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://strm.sh/tags/cryptography/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Minesort, a cryptography based sort algorithm</title>
      <link>https://strm.sh/post/mine-sort/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://strm.sh/post/mine-sort/</guid>
      <description>Mine sort is a cryptography based sorting algorithm that can run in $O(n)$ time if you are lucky. It consists in two stages, the first one is to create a cryptographic seed, and the second one is to check if the seed sorts the array.
Digging further into the first stage, this seed consists of the double hash of a static content which previously is concatenated with a seed .</description>
    </item>
    
    <item>
      <title>Bitcoin address generation in pure python</title>
      <link>https://strm.sh/post/bitcoin-address-generation/</link>
      <pubDate>Fri, 14 Sep 2018 20:19:50 +0000</pubDate>
      
      <guid>https://strm.sh/post/bitcoin-address-generation/</guid>
      <description>Bitcoin address generation can be split in 4 steps listed bellow:
 Generating a secure private key. Calculate the public key from the private key. Encode the public key as a bitcoin address. Encode the private key in the WIF format.  Step 1: Generate ECDSA Keypair The very first step is to select a good and secure number, for this example we won&amp;rsquo;t use one, instead we will simply get the random from the system.</description>
    </item>
    
    <item>
      <title>Mining monero using live a live usb linuxkit build</title>
      <link>https://strm.sh/post/monero-mining-live-usb/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://strm.sh/post/monero-mining-live-usb/</guid>
      <description>Linuxkit is a good tool to create immutable Linux systems, so why don&amp;rsquo;t use it to build a Monero mining live distro ? The only thing needed to build an Linux with Linuxkit is a yml file containing the system information. It can be divided in 5 main sections:
 kernel init onboot - applications that will run when the Linux boot (after init) services - services that will run on this system files - any extra files that you need to copy into your iso (like keys or configs)  Based on these principles, bellow is the configuration of a miner that will boot and start mining rigth away.</description>
    </item>
    
    <item>
      <title>Bitcoin transaction nonce reuse vulnerability</title>
      <link>https://strm.sh/post/bitcoin-transaction-nonce-reuse/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://strm.sh/post/bitcoin-transaction-nonce-reuse/</guid>
      <description>This post aims to analyse an attack against the Bitcoin, in this attack were Found 123 vulnerable transactions and 416 private keys were recovered summing up 26.85729198 btcs (2685729198 satoshis) could have been compromised, which at this exact moment worth 166,219.51 dollars.
Cryptographic concept of the attack When the nonce is reused it become vulnerable and result in a trivial equation to be solved.
$$ Key=((r \times (s_1 - s_2))^{p - 2} \mod{p}) \times ((m_1 \times s_2) - (m_2 \times s_1)) \mod{p} $$</description>
    </item>
    
  </channel>
</rss>